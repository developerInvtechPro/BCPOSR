#!/usr/bin/env node

/**
 * Script para corregir el JSX mal ubicado en medio de la funci√≥n ejecutarTestPostmanBusinessCentral
 */

const fs = require('fs');

console.log('üîß CORRIGIENDO JSX MAL UBICADO');
console.log('===============================\n');

const filePath = 'src/pages/index.tsx';

try {
  let content = fs.readFileSync(filePath, 'utf8');
  console.log(`üìñ Archivo le√≠do: ${(content.length / 1024).toFixed(1)} KB`);
  
  // Crear backup
  const backupPath = `${filePath}.backup.jsx-placement.${Date.now()}`;
  fs.writeFileSync(backupPath, content);
  console.log(`üíæ Backup creado: ${backupPath}`);
  
  let corrections = 0;
  const lines = content.split('\n');
  
  // Buscar el final de la funci√≥n ejecutarTestPostmanBusinessCentral
  let funcionStart = -1;
  let funcionEnd = -1;
  
  for (let i = 0; i < lines.length; i++) {
    if (lines[i].includes('const ejecutarTestPostmanBusinessCentral = async () => {')) {
      funcionStart = i;
      console.log(`üîç Encontrada funci√≥n ejecutarTestPostmanBusinessCentral en l√≠nea ${i + 1}`);
    }
    
    // Buscar el final de la funci√≥n (l√≠nea que termina con }; y est√° despu√©s del inicio)
    if (funcionStart !== -1 && i > funcionStart && lines[i].trim() === '};') {
      funcionEnd = i;
      console.log(`üîç Encontrado final de funci√≥n en l√≠nea ${i + 1}`);
      break;
    }
  }
  
  if (funcionStart !== -1 && funcionEnd !== -1) {
    // Eliminar todo el JSX que est√° despu√©s del final de la funci√≥n hasta encontrar el return principal
    let jsxStart = funcionEnd + 1;
    let jsxEnd = -1;
    
    // Buscar donde empieza el return principal de la funci√≥n Home
    for (let i = jsxStart; i < lines.length; i++) {
      // Buscar l√≠neas que contienen JSX (Grid, Box, etc.) que est√°n mal ubicadas
      if (lines[i].includes('</Box>') && 
          lines[i + 1] && lines[i + 1].includes('</Grid>') &&
          lines[i + 2] && lines[i + 2].includes('{/* Panel central:')) {
        jsxEnd = i + 1;
        console.log(`üîç Encontrado final del JSX mal ubicado en l√≠nea ${i + 2}`);
        break;
      }
    }
    
    if (jsxEnd !== -1) {
      console.log(`‚ùå Eliminando JSX mal ubicado desde l√≠nea ${jsxStart + 1} hasta l√≠nea ${jsxEnd + 1}`);
      
      const fixedLines = lines.filter((line, index) => {
        if (index > funcionEnd && index <= jsxEnd) {
          corrections++;
          return false; // Eliminar estas l√≠neas
        }
        return true; // Mantener las dem√°s l√≠neas
      });
      
      content = fixedLines.join('\n');
      console.log(`‚úÖ Eliminadas ${corrections} l√≠neas de JSX mal ubicado`);
    }
  }

  // Limpiar l√≠neas vac√≠as excesivas
  content = content.replace(/\n\s*\n\s*\n/g, '\n\n');

  // Escribir archivo corregido
  fs.writeFileSync(filePath, content);

  console.log('\n‚úÖ CORRECCIONES APLICADAS');
  console.log('‚îÄ'.repeat(30));
  console.log(`üìä Total correcciones: ${corrections}`);
  console.log(`üìä Tama√±o final: ${(content.length / 1024).toFixed(1)} KB`);
  
  console.log('\nüöÄ JSX mal ubicado eliminado. Reinicie el servidor.');
  
} catch (error) {
  console.error('‚ùå Error:', error.message);
  process.exit(1);
} 