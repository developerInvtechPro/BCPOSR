#!/bin/bash

# Script de Restauraci√≥n de Backup desde la Nube
# Sistema POS Honduras

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üîÑ Sistema de Restauraci√≥n de Backup${NC}"
echo -e "${BLUE}====================================${NC}"

# Funci√≥n para mostrar servicios disponibles
show_cloud_services() {
    services=()
    
    if rclone listremotes | grep -q "^gdrive:$"; then
        services+=("Google Drive")
    fi
    
    if rclone listremotes | grep -q "^onedrive:$"; then
        services+=("OneDrive")
    fi
    
    if [ ${#services[@]} -eq 0 ]; then
        echo -e "${RED}‚ùå No hay servicios de nube configurados${NC}"
        echo -e "${YELLOW}üí° Configure primero Google Drive o OneDrive con el script setup-backup-cloud.sh${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ Servicios disponibles: ${services[*]}${NC}"
    return 0
}

# Funci√≥n para listar backups disponibles
list_backups() {
    local service=$1
    local remote_name=""
    local folder=""
    
    if [[ "$service" == "Google Drive" ]]; then
        remote_name="gdrive"
        folder="Backups/Sistema-POS"
    elif [[ "$service" == "OneDrive" ]]; then
        remote_name="onedrive"
        folder="Backups/Sistema-POS"
    fi
    
    echo -e "${BLUE}üìÅ Listando backups en $service...${NC}"
    
    # Listar carpetas de backup
    backups=$(rclone lsf "${remote_name}:${folder}" 2>/dev/null | grep "^backup-" | sort -r)
    
    if [ -z "$backups" ]; then
        echo -e "${RED}‚ùå No se encontraron backups en $service${NC}"
        return 1
    fi
    
    echo -e "${GREEN}‚úÖ Backups disponibles:${NC}"
    echo "$backups" | nl -w2 -s'. '
    
    return 0
}

# Funci√≥n para obtener informaci√≥n de un backup
get_backup_info() {
    local service=$1
    local backup_name=$2
    local remote_name=""
    local folder=""
    
    if [[ "$service" == "Google Drive" ]]; then
        remote_name="gdrive"
        folder="Backups/Sistema-POS"
    elif [[ "$service" == "OneDrive" ]]; then
        remote_name="onedrive"
        folder="Backups/Sistema-POS"
    fi
    
    echo -e "${BLUE}üìã Informaci√≥n del backup: $backup_name${NC}"
    
    # Verificar si existe backup-info.json
    if rclone ls "${remote_name}:${folder}/${backup_name}/backup-info.json" >/dev/null 2>&1; then
        # Descargar y mostrar informaci√≥n
        rclone cat "${remote_name}:${folder}/${backup_name}/backup-info.json" 2>/dev/null | jq -r '
            "üìÖ Fecha: " + .fecha +
            "\nüíæ Tama√±o: " + .tamano_backup +
            "\nüñ•Ô∏è Servidor: " + .servidor +
            "\nüë§ Usuario: " + .usuario +
            "\nüè∑Ô∏è Versi√≥n: " + .version
        ' 2>/dev/null || {
            # Si jq no est√° disponible, mostrar JSON crudo
            echo -e "${YELLOW}‚ö†Ô∏è Informaci√≥n b√°sica (jq no disponible):${NC}"
            rclone cat "${remote_name}:${folder}/${backup_name}/backup-info.json" 2>/dev/null
        }
    else
        echo -e "${YELLOW}‚ö†Ô∏è No se encontr√≥ informaci√≥n detallada del backup${NC}"
    fi
    
    # Mostrar archivos en el backup
    echo -e "\n${BLUE}üìÇ Contenido del backup:${NC}"
    rclone ls "${remote_name}:${folder}/${backup_name}" 2>/dev/null | head -10
}

# Funci√≥n para restaurar backup
restore_backup() {
    local service=$1
    local backup_name=$2
    local restore_dir="./restore-$(date +%Y%m%d_%H%M%S)"
    local remote_name=""
    local folder=""
    
    if [[ "$service" == "Google Drive" ]]; then
        remote_name="gdrive"
        folder="Backups/Sistema-POS"
    elif [[ "$service" == "OneDrive" ]]; then
        remote_name="onedrive"
        folder="Backups/Sistema-POS"
    fi
    
    echo -e "${BLUE}üîÑ Iniciando restauraci√≥n...${NC}"
    echo -e "   ‚Ä¢ Backup: $backup_name"
    echo -e "   ‚Ä¢ Servicio: $service"
    echo -e "   ‚Ä¢ Destino: $restore_dir"
    
    # Crear directorio de restauraci√≥n
    mkdir -p "$restore_dir"
    
    # Descargar backup
    echo -e "${YELLOW}üì• Descargando backup desde $service...${NC}"
    rclone copy "${remote_name}:${folder}/${backup_name}" "$restore_dir" \
        --progress \
        --transfers 4 \
        --checkers 8
    
    if [ $? -ne 0 ]; then
        echo -e "${RED}‚ùå Error al descargar el backup${NC}"
        rm -rf "$restore_dir"
        return 1
    fi
    
    echo -e "${GREEN}‚úÖ Backup descargado exitosamente${NC}"
    
    # Extraer c√≥digo fuente si existe
    if [ -f "$restore_dir/codigo-fuente.tar.gz" ]; then
        echo -e "${YELLOW}üì¶ Extrayendo c√≥digo fuente...${NC}"
        tar -xzf "$restore_dir/codigo-fuente.tar.gz" -C "$restore_dir"
        
        if [ $? -eq 0 ]; then
            echo -e "${GREEN}‚úÖ C√≥digo fuente extra√≠do${NC}"
        else
            echo -e "${RED}‚ùå Error al extraer c√≥digo fuente${NC}"
        fi
    fi
    
    # Extraer logs si existen
    if [ -f "$restore_dir/logs.tar.gz" ]; then
        echo -e "${YELLOW}üìã Extrayendo logs...${NC}"
        tar -xzf "$restore_dir/logs.tar.gz" -C "$restore_dir"
        
        if [ $? -eq 0 ]; then
            echo -e "${GREEN}‚úÖ Logs extra√≠dos${NC}"
        else
            echo -e "${RED}‚ùå Error al extraer logs${NC}"
        fi
    fi
    
    echo -e "\n${GREEN}üéâ Restauraci√≥n completada!${NC}"
    echo -e "${BLUE}üìã Pasos siguientes:${NC}"
    echo -e "   1. Navegar a: cd $restore_dir"
    echo -e "   2. Instalar dependencias: npm install"
    echo -e "   3. Construir aplicaci√≥n: npm run build"
    echo -e "   4. Verificar configuraciones en: $restore_dir/config/"
    echo -e "   5. Revisar datos en: $restore_dir/data/"
    
    # Mostrar resumen de archivos restaurados
    echo -e "\n${BLUE}üìÇ Archivos restaurados:${NC}"
    find "$restore_dir" -type f -name "*.json" -o -name "*.js" -o -name "*.md" | head -10
    
    return 0
}

# Funci√≥n principal del men√∫
main_menu() {
    while true; do
        echo -e "\n${YELLOW}¬øQu√© desea hacer?${NC}"
        echo "1. üìã Ver backups disponibles"
        echo "2. üîÑ Restaurar un backup"
        echo "3. üìä Ver informaci√≥n de un backup"
        echo "4. üö™ Salir"
        echo ""
        
        read -p "Seleccione una opci√≥n (1-4): " choice
        
        case $choice in
            1)
                view_backups
                ;;
            2)
                restore_menu
                ;;
            3)
                info_menu
                ;;
            4)
                echo -e "${GREEN}üëã ¬°Hasta luego!${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}‚ùå Opci√≥n inv√°lida. Seleccione 1-4${NC}"
                ;;
        esac
    done
}

# Funci√≥n para ver backups
view_backups() {
    echo -e "\n${BLUE}üìã Ver Backups Disponibles${NC}"
    
    # Verificar servicios disponibles
    if ! show_cloud_services; then
        return
    fi
    
    # Seleccionar servicio
    services=()
    if rclone listremotes | grep -q "^gdrive:$"; then
        services+=("Google Drive")
    fi
    if rclone listremotes | grep -q "^onedrive:$"; then
        services+=("OneDrive")
    fi
    
    if [ ${#services[@]} -eq 1 ]; then
        selected_service="${services[0]}"
    else
        echo -e "\n${YELLOW}Seleccione el servicio:${NC}"
        for i in "${!services[@]}"; do
            echo "$((i+1)). ${services[$i]}"
        done
        
        read -p "Selecci√≥n (1-${#services[@]}): " service_choice
        
        if [[ $service_choice -ge 1 && $service_choice -le ${#services[@]} ]]; then
            selected_service="${services[$((service_choice-1))]}"
        else
            echo -e "${RED}‚ùå Selecci√≥n inv√°lida${NC}"
            return
        fi
    fi
    
    list_backups "$selected_service"
}

# Funci√≥n para men√∫ de restauraci√≥n
restore_menu() {
    echo -e "\n${BLUE}üîÑ Restaurar Backup${NC}"
    
    # Verificar servicios disponibles
    if ! show_cloud_services; then
        return
    fi
    
    # Seleccionar servicio
    services=()
    if rclone listremotes | grep -q "^gdrive:$"; then
        services+=("Google Drive")
    fi
    if rclone listremotes | grep -q "^onedrive:$"; then
        services+=("OneDrive")
    fi
    
    if [ ${#services[@]} -eq 1 ]; then
        selected_service="${services[0]}"
    else
        echo -e "\n${YELLOW}Seleccione el servicio:${NC}"
        for i in "${!services[@]}"; do
            echo "$((i+1)). ${services[$i]}"
        done
        
        read -p "Selecci√≥n (1-${#services[@]}): " service_choice
        
        if [[ $service_choice -ge 1 && $service_choice -le ${#services[@]} ]]; then
            selected_service="${services[$((service_choice-1))]}"
        else
            echo -e "${RED}‚ùå Selecci√≥n inv√°lida${NC}"
            return
        fi
    fi
    
    # Listar backups y seleccionar
    if ! list_backups "$selected_service"; then
        return
    fi
    
    # Obtener lista de backups
    local remote_name=""
    local folder=""
    
    if [[ "$selected_service" == "Google Drive" ]]; then
        remote_name="gdrive"
        folder="Backups/Sistema-POS"
    elif [[ "$selected_service" == "OneDrive" ]]; then
        remote_name="onedrive"
        folder="Backups/Sistema-POS"
    fi
    
    backups=$(rclone lsf "${remote_name}:${folder}" 2>/dev/null | grep "^backup-" | sort -r)
    backup_array=($backups)
    
    echo ""
    read -p "Seleccione el n√∫mero del backup a restaurar: " backup_choice
    
    if [[ $backup_choice -ge 1 && $backup_choice -le ${#backup_array[@]} ]]; then
        selected_backup="${backup_array[$((backup_choice-1))]}"
        selected_backup="${selected_backup%/}" # Remover trailing slash
        
        # Confirmar restauraci√≥n
        echo -e "\n${YELLOW}‚ö†Ô∏è Est√° a punto de restaurar:${NC}"
        echo -e "   ‚Ä¢ Backup: $selected_backup"
        echo -e "   ‚Ä¢ Servicio: $selected_service"
        echo ""
        read -p "¬øContinuar? (y/N): " confirm
        
        if [[ $confirm =~ ^[Yy]$ ]]; then
            restore_backup "$selected_service" "$selected_backup"
        else
            echo -e "${YELLOW}‚è∏Ô∏è Restauraci√≥n cancelada${NC}"
        fi
    else
        echo -e "${RED}‚ùå Selecci√≥n inv√°lida${NC}"
    fi
}

# Funci√≥n para men√∫ de informaci√≥n
info_menu() {
    echo -e "\n${BLUE}üìä Informaci√≥n de Backup${NC}"
    
    # Misma l√≥gica que restore_menu pero solo para mostrar informaci√≥n
    if ! show_cloud_services; then
        return
    fi
    
    # Seleccionar servicio (c√≥digo simplificado)
    services=()
    if rclone listremotes | grep -q "^gdrive:$"; then
        services+=("Google Drive")
    fi
    if rclone listremotes | grep -q "^onedrive:$"; then
        services+=("OneDrive")
    fi
    
    if [ ${#services[@]} -eq 1 ]; then
        selected_service="${services[0]}"
    else
        echo -e "\n${YELLOW}Seleccione el servicio:${NC}"
        for i in "${!services[@]}"; do
            echo "$((i+1)). ${services[$i]}"
        done
        
        read -p "Selecci√≥n (1-${#services[@]}): " service_choice
        selected_service="${services[$((service_choice-1))]}"
    fi
    
    if ! list_backups "$selected_service"; then
        return
    fi
    
    # Obtener selecci√≥n y mostrar informaci√≥n
    local remote_name=""
    local folder=""
    
    if [[ "$selected_service" == "Google Drive" ]]; then
        remote_name="gdrive"
        folder="Backups/Sistema-POS"
    elif [[ "$selected_service" == "OneDrive" ]]; then
        remote_name="onedrive"
        folder="Backups/Sistema-POS"
    fi
    
    backups=$(rclone lsf "${remote_name}:${folder}" 2>/dev/null | grep "^backup-" | sort -r)
    backup_array=($backups)
    
    echo ""
    read -p "Seleccione el n√∫mero del backup para ver informaci√≥n: " backup_choice
    
    if [[ $backup_choice -ge 1 && $backup_choice -le ${#backup_array[@]} ]]; then
        selected_backup="${backup_array[$((backup_choice-1))]}"
        selected_backup="${selected_backup%/}"
        get_backup_info "$selected_service" "$selected_backup"
    else
        echo -e "${RED}‚ùå Selecci√≥n inv√°lida${NC}"
    fi
}

# Verificar prerrequisitos
if ! command -v rclone &> /dev/null; then
    echo -e "${RED}‚ùå Error: rclone no est√° instalado${NC}"
    echo -e "${YELLOW}üí° Instalar con: curl https://rclone.org/install.sh | sudo bash${NC}"
    exit 1
fi

# Verificar servicios configurados
if ! show_cloud_services; then
    exit 1
fi

# Iniciar men√∫ principal
main_menu 